import os
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
import uvicorn

from app.database import SessionLocal, engine, Base
from app.routers import auth, groups, messages, logs, auto_reply, message_template

# VeritabanÄ± tablolarÄ±nÄ± oluÅŸtur
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="Telegram MicroBot API",
    description="Telegram grup mesajlarÄ±nÄ± otomatik yÃ¶neten, Ã§oklu kullanÄ±cÄ± destekli MicroBot API.",
    version="1.0.0"
)

# CORS ayarlarÄ±
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # GÃ¼venlik iÃ§in production ortamÄ±nda Ã¶zelleÅŸtirin
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Router'larÄ± ekle
app.include_router(auth.router, prefix="/api/auth", tags=["Auth"])
app.include_router(groups.router, prefix="/api/groups", tags=["Groups"])
app.include_router(messages.router, prefix="/api/messages", tags=["Messages"])
app.include_router(logs.router, prefix="/api/logs", tags=["Logs"])
app.include_router(auto_reply.router, tags=["Auto Reply"])
app.include_router(message_template.router, prefix="/api/message-templates", tags=["Message Templates"])

# VeritabanÄ± baÄŸÄ±mlÄ±lÄ±ÄŸÄ± (opsiyonel olarak burada tanÄ±mlanabilir)
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Root endpoint
@app.get("/")
async def root():
    return {"message": "ğŸ“¡ Telegram MicroBot API'ye HoÅŸ Geldiniz."}

# GeliÅŸtirme sunucusunu Ã§alÄ±ÅŸtÄ±r
if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
